{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Godantic","text":"<p>Godantic is a Go package for inspecting and validating JSON-like data against Go struct types and schemas. It provides type checks, tag-based validation, plugin hooks, and dynamic rules.</p> <p>Navigate through the sidebar to learn how to use it effectively.</p>"},{"location":"advanced/","title":"Advanced Usage","text":"<ul> <li>Conditional rules with <code>when</code></li> <li>Combining multiple constraints</li> <li>Validating large, nested structures</li> <li>Integrating with frameworks like Gin</li> </ul>"},{"location":"custom-tags/","title":"Custom Tag Functions","text":"<p>Use the <code>validate</code> tag to attach custom logic to a field:</p> <pre><code>type User struct {\n  Name string `validate:\"starts_with_A,min_len_3\"`\n}\n</code></pre> <p>Register:</p> <pre><code>godantic.RegisterCustom[string](\"starts_with_A\", func(val string, path string) *godantic.Error {\n    if !strings.HasPrefix(val, \"A\") {\n        return &amp;godantic.Error{...}\n    }\n    return nil\n})\n</code></pre>"},{"location":"dynamic-fields/","title":"Dynamic Field Validation","text":""},{"location":"dynamic-fields/#interface","title":"Interface","text":"<pre><code>type DynamicFieldsValidator interface {\n    GetValue() any\n    GetValueType() string\n    GetAttribute() string\n}\n</code></pre> <p>Godantic will dynamically validate based on the value type (<code>string</code>, <code>integer</code>, <code>float</code>, etc).</p>"},{"location":"getting-started/","title":"Getting Started","text":""},{"location":"getting-started/#installation","title":"Installation","text":"<pre><code>go get github.com/grahms/godantic\n</code></pre>"},{"location":"getting-started/#basic-usage","title":"Basic Usage","text":"<pre><code>import \"github.com/grahms/godantic\"\n\nvar v godantic.Validate\nerr := v.BindJSON(jsonData, &amp;myStruct)\n</code></pre> <p>This will bind and validate the JSON into your struct.</p>"},{"location":"plugins/","title":"Plugin-Based Validation","text":""},{"location":"plugins/#interface","title":"Interface","text":"<pre><code>type ValidationPlugin interface {\n    Validate() *godantic.Error\n}\n</code></pre> <p>Godantic will auto-detect and run this method on nested structs or list elements.</p>"},{"location":"why-godantic/","title":"Why Godantic?","text":"<p>Godantic fills the gap between basic JSON binding and full validation logic. It offers:</p> <ul> <li>Full support for nested structs and lists</li> <li>Conditional validations</li> <li>Dynamic field validation</li> <li>Custom tag and plugin support</li> <li>Format and regex constraints</li> </ul>"}]}